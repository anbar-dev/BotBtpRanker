@using Application.Interfaces
@using Domain.Entities
@inject IBondService bondService
@rendermode InteractiveServer
@attribute [StreamRendering]

<div class="container-fluid mt-3">
    <h3>@(Instrument + "s") List</h3>
    <div class="row">
        <div class="d-flex align-items-center">
            <p class="para">Sort By:</p>
            <select class="form-select selector" @onchange="SortBySelection">
                <option value="Yield">Yield to maturity</option>
                <option value="YearlyCoupon">Yearly Coupon</option>
                <option value="Price">Price</option>
                <option value="Expiration">Expiration Date</option>
            </select>
        </div>
    </div>

    @if (bonds == null || bonds.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered border-dark table-striped table-hover bg-secondary bg-opacity-10 mt-3">
            <thead>
                <tr>
                    <th>ISIN</th>
                    <th>Name</th>
                    <th>Expiration</th>
                    <th>Yearly Coupon</th>
                    <th>Price</th>
                    <th>Yield to maturity</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < NumberOfBondsToShow; i++)
            {
                <tr>
                        <td>@bonds[i].Isin</td>
                        <td>@bonds[i].Name</td>
                        <td>@DateOnly.FromDateTime(bonds[i].Expiration)</td>
                        <td>@bonds[i].YearlyCoupon</td>
                        <td>@bonds[i].HistoricalValues.Last().Price</td>
                        <td>@bonds[i].HistoricalValues.Last().Yield</td>
                    </tr>
            }
            </tbody>
        </table>
    @if (bonds.Count != NumberOfBondsToShow)
    {
        <p> <a href="/@Instrument">See all @(Instrument + "s")</a></p>
    }


}
</div>

@code {
[Parameter]
public string Instrument { get; set; }

[Parameter]
public int? NumberOfBondsToShow { get; set; }

private IList<Bond> bonds;

protected override async Task OnInitializedAsync()
{
    if (bonds == null)
    {
        bonds = await bondService.GetBonds(Instrument);
        bonds = bonds.OrderByDescending(b => b.HistoricalValues.Last().Yield).ToList();
    }

    if (NumberOfBondsToShow == null || NumberOfBondsToShow > bonds.Count)
    {
        NumberOfBondsToShow = bonds.Count;
    }
}

private void SortBySelection(ChangeEventArgs e)
{
    switch (e.Value)
    {
        case "Yield":
            bonds = bonds.OrderByDescending(b => b.HistoricalValues.Last().Yield).ToList();
            break;
        case "Price":
            bonds = bonds.OrderBy(b => b.HistoricalValues.Last().Price).ToList();
            break;
        case "Expiration":
            bonds = bonds.OrderBy(b => b.Expiration).ToList();
            break;
        case "YearlyCoupon":
            bonds = bonds.OrderByDescending(b => b.YearlyCoupon).ToList();
            break;
    }

}
}
